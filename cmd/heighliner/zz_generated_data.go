// Code generated by go-bindata.
// sources:
// docs/kube/00-heighliner-namespace.yaml
// docs/kube/config-policy.yaml
// docs/kube/github-policy.yaml
// docs/kube/image-policy.yaml
// docs/kube/microservice.yaml
// docs/kube/network-policy.yaml
// docs/kube/versioned-microservice.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsKube00HeighlinerNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x09\x80\x40\x0c\x05\xd0\x3e\x53\x64\x01\x0b\xdb\x0c\x61\x69\xff\xf1\x3e\x78\x68\xe2\x71\x09\x82\xdb\xfb\x30\xfa\xce\x99\xfd\x09\xd3\x77\x95\xab\x47\x33\xdd\xe0\xcc\x81\x83\xe2\x2c\x34\x14\x4c\x54\x03\x4e\xd3\xf3\x8e\xb9\xe4\x97\x45\x97\x3f\x00\x00\xff\xff\xeb\xc7\x25\x1e\x3d\x00\x00\x00")

func docsKube00HeighlinerNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsKube00HeighlinerNamespaceYaml,
		"docs/kube/00-heighliner-namespace.yaml",
	)
}

func docsKube00HeighlinerNamespaceYaml() (*asset, error) {
	bytes, err := docsKube00HeighlinerNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/kube/00-heighliner-namespace.yaml", size: 61, mode: os.FileMode(420), modTime: time.Unix(1535043176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsKubeConfigPolicyYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xcd\x6e\xdb\x3c\x10\xbc\xf3\x29\x16\x3e\x7e\xf8\xe4\xc4\xb7\x82\xb7\xfe\x00\x45\x0f\x0d\x8c\x14\xe8\xa5\xe8\x61\x4d\xaf\xe5\x6d\xf8\xd7\x25\xe9\xd6\x0d\xf2\xee\x05\x55\x09\x56\x64\xc5\x46\x51\x9e\xc4\xdd\xe1\xcc\x72\x86\xc2\xc8\x9f\x49\x12\x07\xaf\x41\x36\x68\x96\x58\xf2\x3e\x08\xff\xc2\xcc\xc1\x2f\x1f\x5e\xa5\x25\x87\x9b\xc3\x6a\x43\x19\x57\xea\x81\xfd\x56\xc3\x5b\x5b\x52\x26\xb9\x0f\x96\x94\xa3\x8c\x5b\xcc\xa8\x15\x80\x47\x47\x1a\xf6\xc4\xed\xde\xb2\x27\xd1\x26\xf8\x1d\xb7\x31\x58\x36\x47\x25\xc5\x52\xaa\xb0\x06\x30\xf2\x7b\x09\x25\x26\x0d\x5f\x16\x7b\xeb\x65\xc9\x61\xf1\x55\x01\x00\x08\xa5\x50\xc4\x50\xd7\x1a\x9d\x67\x4a\x3d\xe2\x40\xb2\xe9\xba\xff\x75\x85\x09\xdb\x61\x35\x47\x94\xc8\x08\xe5\xb4\xf8\x1f\x7a\x4e\x87\xf1\x8c\xaf\xa5\x3c\xc7\x88\x91\xe9\x67\x26\x5f\x3d\x4a\xbd\x21\xb3\xc3\x96\x94\x83\x1b\x4a\x5b\xda\xb1\xe7\xea\xe1\xec\xdc\xaa\x69\x1a\xa5\xfe\xd1\xfc\x37\xec\xb7\xec\xdb\xbf\xc9\x20\x58\xba\xa7\x5d\x05\x0e\x77\xbc\xa0\xac\x00\xce\x03\xbf\x26\x91\xca\xe6\x1b\x99\xdc\x27\x3d\xc5\x36\xcf\xb0\xd5\x96\x8a\x48\x11\x4d\x85\x59\x2f\x4d\x3a\xa6\x4c\xae\x6b\xfd\x11\xff\x44\x72\x60\x43\xaf\x8d\x09\xc5\xe7\x19\xe7\x0e\x83\x35\x13\xe4\x25\x5b\xa6\x73\xbc\x30\xc5\xb9\xd8\xe9\x29\x4c\x72\x79\x47\xd1\x86\xa3\xa3\x59\xe1\xb1\x5a\x95\xce\x12\xac\x25\x79\x59\x38\x45\x32\xf5\xb8\x50\xb4\x6c\x30\x69\x58\x29\x80\x4c\x2e\x5a\xcc\xa4\x3b\x7b\xc6\x32\x75\x59\xdc\x90\x4d\xc3\xae\x26\x1c\x2f\x29\x03\x0c\x22\xdd\xf7\x33\xef\xee\xae\xc6\x06\x95\x39\x63\x6d\x8e\x24\x9b\xab\xf7\x1d\x16\x3b\x6c\x49\x03\x0a\xb7\x98\xc3\xcd\xe8\x35\x3d\x3e\x2e\x7b\xb7\x9f\x9e\xa6\x07\xd6\xc5\xda\x75\xc7\xaa\xe1\xc3\xee\x2e\xe4\xb5\x50\xaa\x96\x9f\x70\x28\xed\x68\xa0\x3a\x92\x89\x3f\x46\xfb\xd3\x3f\x3b\x2a\xd6\xf2\xf7\x42\x29\x4f\xaa\x00\x26\x16\x0d\xab\xdb\x5b\x37\xa9\x3b\x72\x41\x8e\xb5\xf5\x91\xd5\xef\x00\x00\x00\xff\xff\xdc\x56\x9b\xec\x45\x05\x00\x00")

func docsKubeConfigPolicyYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsKubeConfigPolicyYaml,
		"docs/kube/config-policy.yaml",
	)
}

func docsKubeConfigPolicyYaml() (*asset, error) {
	bytes, err := docsKubeConfigPolicyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/kube/config-policy.yaml", size: 1349, mode: os.FileMode(420), modTime: time.Unix(1535043176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsKubeGithubPolicyYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xdb\x46\x10\xbd\xf3\x57\x0c\x78\x09\x50\x94\xb4\x8c\xa0\x80\xc1\x5b\x12\x03\xae\x0f\x51\x85\x18\xe8\xc5\x08\x8a\xd1\x72\x4c\x6e\xbd\xdc\x65\x67\x87\x4a\x14\xc1\xff\xbd\x58\x7e\x48\xa4\xac\x2f\x23\x05\xaa\x8b\xcd\xdd\x99\x79\x6f\x67\x67\xde\x2c\xd6\xfa\x4f\x62\xaf\x9d\xcd\x80\x97\xa8\x52\x6c\xa4\x74\xac\x7f\xa0\x68\x67\xd3\xe7\x1b\x9f\x6a\x77\xb5\xba\x5e\x92\xe0\x75\xf4\xac\x6d\x9e\xc1\x27\xd3\x78\x21\xfe\xe2\x0c\x45\x15\x09\xe6\x28\x98\x45\x00\x16\x2b\xca\xa0\x24\x5d\x94\x46\x5b\xe2\xac\xd0\x52\x36\xcb\x84\xa9\x76\x5e\x8b\xe3\x75\xc4\x8d\x21\x1f\x6c\x13\xc0\x5a\xdf\xb1\x6b\x6a\x9f\xc1\x63\x5c\x1a\xcb\xa9\x76\xf1\xd7\x08\x00\x80\xc9\xbb\x86\x55\x67\x19\x6c\xe3\x2e\xd2\x36\x90\x26\x1f\xb7\x5b\x2b\xe2\x65\x1b\xe0\x97\xd6\xf5\x8d\x51\x2b\xad\xd8\x79\xe2\x95\x56\x43\xc0\x04\x62\x4b\xf2\xcd\xf1\x73\xed\x8c\x56\x7a\xb4\xae\x2b\x2c\x68\xba\xba\x85\x2f\x48\xe2\x5f\x21\x36\xda\xb7\x7f\xbf\xa1\xa8\xf2\x10\x23\xac\x35\x7d\x17\xb2\x21\xe1\xbe\xcf\xee\x2b\x7a\xf0\x18\xab\xc6\x8b\xab\x86\xa5\x9c\x9e\xb4\xd5\xe1\x42\x7c\x6f\x7c\xea\xdc\xf0\x18\x1f\x3d\xb1\x27\xc5\x24\xa7\xd8\x7f\x8d\xa2\x24\x49\xa2\xe8\x27\x0b\xe3\xa3\xb6\xb9\xb6\xc5\x9b\xeb\xc3\x19\xfa\x42\x4f\xc1\x7a\x38\xd1\x09\xf8\x08\xe0\x75\x45\x5e\x84\xe3\x9b\xe5\xdf\xa4\xa4\x2f\xc5\x7d\x87\xe4\xb5\x43\xc8\x57\x30\xf3\x35\xaa\x60\x6b\x2c\x27\x7e\xed\x85\xaa\x76\xab\xa3\xf1\xd0\x95\xd2\x07\xa5\x5c\x63\xe5\x40\x22\x57\x43\xa6\xf6\x2c\x4f\x65\xe9\x20\x99\x23\x54\x5e\x23\xee\xaa\x6d\xef\xae\x6e\xa9\x36\x6e\x5d\xd1\x41\xf4\x57\x90\x89\x72\x56\xd8\x19\x43\x7c\x1c\xdd\xd7\xa4\x42\x0c\xa6\xda\x68\x85\x3e\x83\xeb\x08\x40\xa8\xaa\x0d\x0a\x75\x35\x38\xc6\x0a\x3f\x83\x4b\x32\x7e\xf8\x0a\xb7\x5e\x9f\x85\x07\x18\x90\xda\xff\x27\xa9\x9c\x5f\x76\x95\x00\x21\x22\x06\x8b\x11\x78\x72\xd9\xf1\x87\x5f\x2b\x08\x19\x20\xeb\x02\xc5\x5d\x8d\x0a\x6e\xb3\x49\xfb\x1b\x78\x79\xd9\x77\x58\x34\xc6\x2c\x82\x8a\xac\x33\x98\xd3\x6a\x12\x11\xb9\x18\xd1\x09\x84\x2e\xa4\x42\x76\x35\xf6\xdb\x1d\xe5\xf6\x8f\xcf\x1f\xee\xe7\x93\x2d\x80\x15\x9a\x86\x32\xd8\x6c\xd2\x3b\x2d\xbf\x37\xcb\x4f\x68\xcc\x12\xd5\xf3\xad\xab\x50\x4f\x29\xef\x49\xc8\x6e\xf9\x9f\x86\xbc\xec\xad\x02\xa8\xba\xc9\xe0\x7a\x36\xab\xf6\xd6\x2b\xaa\x1c\xaf\xc3\xd6\x67\x3d\x89\x8e\xb9\xb6\xe4\xfd\x82\xdd\x92\xa6\xc1\x4a\x91\xfa\x8e\x64\x1f\xa1\x46\x29\x33\xb8\xfa\xab\x24\x34\x52\xfe\xd8\xdf\x75\x2c\x19\xdc\xcc\x6e\x66\x93\x8d\x56\x3d\xd1\xdc\x92\xc1\xf5\x03\x29\x67\x73\x9f\xc1\xfb\x89\x49\x4d\xac\x5d\x7e\x70\xd3\xe8\x15\xfd\x5f\x24\x7f\x3b\x4d\xf2\xbc\xc4\x4c\xba\x7b\xdc\x6d\x7d\xdf\x5c\xd4\xec\x3f\xab\x08\xb2\xae\x29\x83\xb9\xcb\x69\xe1\x58\xa2\x2e\x05\x7b\xe2\x8b\xb9\x21\xef\xa3\x71\x82\xda\x0f\x41\x2e\x48\x16\xe3\x9c\x79\x32\xa4\xc4\x71\x77\x90\xf3\x92\xe1\x05\xa5\x69\xe1\x8c\xc3\xfc\x23\x1a\xb4\x8a\x38\x83\xcd\xcb\x81\x04\x2a\x62\xa9\xd0\x62\x41\xbc\x9b\x72\x68\xea\x72\x37\xe6\x88\x45\x3f\x69\x85\x72\xe8\xfd\xd3\x33\x51\x7d\x4f\x25\x62\xfc\xf9\x04\x75\x73\x79\x7e\x22\x80\xf6\xbe\x21\xee\x67\xe3\x80\x65\x48\x3c\x59\xc5\xeb\x5a\x92\x9a\x5d\x3e\x9a\x45\xfd\x48\xbc\x6f\xdd\xa2\xa0\x77\x55\xe5\x6c\x87\xf0\xee\x68\xe7\xbf\x0b\x83\x57\x55\x7d\x95\x2b\x67\x9f\x74\x31\x3c\x1e\x72\xeb\x67\xd7\xbb\x4a\xaf\xd9\xad\x74\xde\xa6\x71\x93\xde\xce\x1f\x16\xfd\xf7\x56\x3e\xf2\x36\xe6\x56\x22\x92\x93\xb0\x6f\x98\x5c\xf7\xb6\xe0\x50\x29\xff\xd5\xd8\x02\x40\x6b\x9d\xb4\x0f\x8b\x9e\xed\x73\xb3\x24\xb6\x24\xd4\x5e\xbf\xee\x00\x53\x65\xd0\xfb\x0c\x62\x5b\x68\xfb\xbd\x7b\x42\x05\x92\x6c\xd1\x24\xb9\xf5\x69\x5b\x24\xe9\xd4\xb7\x74\x5e\x3a\x72\x47\x0f\x9f\x5e\x16\x49\xc4\x64\x10\xbf\x9f\xcd\xe2\x5d\x5b\x99\xbe\x87\x02\xca\xf6\x91\x77\x5a\xd6\xcf\x57\xda\xe8\x8d\x1e\xe2\x9e\x9b\x13\x41\x02\x87\x3b\x0e\xba\x37\xba\xf0\x5e\x06\xb7\x25\x13\x7c\xc9\xe6\x63\xb5\xec\x55\x68\xfe\x96\xb9\xdb\xfb\x0c\x92\x10\xfd\x1b\x00\x00\xff\xff\x68\xc2\xba\xe2\xc4\x0c\x00\x00")

func docsKubeGithubPolicyYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsKubeGithubPolicyYaml,
		"docs/kube/github-policy.yaml",
	)
}

func docsKubeGithubPolicyYaml() (*asset, error) {
	bytes, err := docsKubeGithubPolicyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/kube/github-policy.yaml", size: 3268, mode: os.FileMode(420), modTime: time.Unix(1536676566, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsKubeImagePolicyYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xcd\x6e\xdb\x4c\x0c\xbc\xeb\x29\x08\x1d\x3f\x7c\x72\xe2\x5b\xa1\x5b\x7f\x80\xa2\x87\x06\x41\x0a\xf4\x62\xf4\xb0\x5a\xd3\x12\x9b\xfd\x2b\xb9\xeb\xd6\x0d\xf2\xee\xc5\xca\x56\x2d\x4b\x8e\x8d\xa0\xba\xd8\xe2\x0e\x67\x66\x87\xb4\x55\xa0\xaf\xc8\x42\xde\xd5\xc0\x8d\xd2\x0b\x95\x62\xe7\x99\x7e\xab\x48\xde\x2d\x1e\xdf\xc8\x82\xfc\xcd\x76\xd9\x60\x54\xcb\xe2\x91\xdc\xba\x86\xf7\x26\x49\x44\x7e\xf0\x06\x0b\x8b\x51\xad\x55\x54\x75\x01\xe0\x94\xc5\x1a\x3a\xa4\xb6\x33\xe4\x90\x6b\xb2\xaa\xc5\x2a\x78\x43\x7a\x57\x70\x32\x28\x19\x56\x81\x0a\xf4\x91\x7d\x0a\x52\xc3\xaa\xec\x8c\xe3\x05\xf9\xf2\x5b\x01\x00\xc0\x28\x3e\xb1\xde\x23\x33\xb6\xec\x49\x7a\x0e\x42\x29\xfb\xea\x16\xb9\xe9\x7b\xff\xeb\xbb\x5e\x49\xd8\x52\xec\x52\xc3\x18\xbc\x50\xf4\xfc\x97\xb5\x82\x72\xbb\x8f\x82\x5c\x7b\x2a\x58\x41\x69\x49\xb3\x17\xe4\x2d\xe9\x99\x8d\x16\x63\xf9\x3f\x94\x86\xa4\xff\xfc\xa9\xa2\xee\xe6\xce\x60\x55\xce\x3c\xc1\xaa\x14\xd4\x8c\x51\x0e\x47\x67\x39\xcf\x5c\x52\x05\xc2\x5f\x11\x5d\xb6\x2b\x87\x31\x9d\x63\xd7\x49\xa2\xb7\x43\x69\x8d\x1b\x72\x94\x27\x3b\xd3\xcb\x51\x16\x55\x55\x15\xc5\x3f\xae\xc4\x3b\x72\x6b\x72\xed\x6b\x36\xc3\x1b\x7c\xc0\x4d\x06\x0e\x77\xbc\xa0\x5c\x00\xcc\xd7\xf0\x9a\x84\xa4\xe6\x3b\xea\x78\xd8\xbf\x29\xb6\x3a\xc1\xe6\x58\x32\x42\x82\xd2\x19\x66\x1c\x57\xb2\x93\x88\xb6\x3f\xda\x8b\x7f\xd9\x6f\xc2\x5b\xad\x7d\x72\xf1\x4c\x72\xdb\x21\x9a\x09\xf2\x52\x2c\x53\x1f\x2f\xb8\x98\x8b\x1d\x57\x61\x32\x97\x0f\x18\x8c\xdf\x59\x3c\x2b\x3c\x56\xab\xb4\x77\x91\xbd\x31\xc8\x2f\x0b\x4b\x40\x9d\xdb\x19\x83\x21\xad\xa4\x86\x65\x01\x10\xd1\x06\xa3\x22\xee\x7f\x60\x63\x99\xfc\x18\xd5\xa0\x91\xe1\x2d\x4f\x38\x5c\x52\x06\x18\x44\xfa\xef\x27\xd9\xdd\x5d\x1d\x1b\x40\x26\x53\xf9\x70\x24\x59\x5d\xbd\xef\xf0\xf4\x88\x1a\x14\x53\xab\xa2\xbf\x19\x6d\xd3\xd3\xd3\xe2\x90\xf6\xf3\xf3\xb4\xe1\x3e\x19\x73\xdf\xb3\xd6\xf0\x69\x73\xe7\xe3\x3d\xa3\xe4\xc8\x8f\x38\xc5\xed\xc8\x50\xb6\x44\x41\x8f\xde\x27\xff\x52\xc7\xf2\x8f\x84\x12\x27\x55\x00\x1d\x52\x0d\xcb\xdb\x5b\x3b\xa9\x5b\xb4\x9e\x77\xf9\xe8\x33\x15\x7f\x02\x00\x00\xff\xff\x56\xdd\xb3\x2f\xdb\x05\x00\x00")

func docsKubeImagePolicyYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsKubeImagePolicyYaml,
		"docs/kube/image-policy.yaml",
	)
}

func docsKubeImagePolicyYaml() (*asset, error) {
	bytes, err := docsKubeImagePolicyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/kube/image-policy.yaml", size: 1499, mode: os.FileMode(420), modTime: time.Unix(1535043176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsKubeMicroserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x6f\xdb\x30\x0c\xbd\xeb\x57\x10\x3e\x0e\x73\xda\xdc\x06\xdf\xf6\x01\xec\xb4\xa2\xe8\x80\x5d\x86\x1d\x68\x99\x75\xb8\xea\x6b\xa2\x64\x2c\x2b\xfa\xdf\x07\x39\x31\xea\x38\x69\xb2\x62\x3e\x49\x8f\x4f\x7a\xe4\x23\x65\x0c\xfc\x8d\xa2\xb0\x77\x0d\xc4\x16\xf5\x0a\x73\xda\xf8\xc8\x7f\x30\xb1\x77\xab\x87\x77\xb2\x62\x7f\x35\xac\x5b\x4a\xb8\x56\x0f\xec\xba\x06\x3e\x9a\x2c\x89\xe2\x9d\x37\xa4\x2c\x25\xec\x30\x61\xa3\x00\x1c\x5a\x6a\x60\x43\xdc\x6f\x0c\x3b\x8a\x8d\x65\x1d\xbd\x50\x1c\x58\x93\x8a\xd9\x90\x14\x5a\x0d\x18\xf8\x73\xf4\x39\x48\x03\xdf\xab\x8d\x71\x71\xc5\xbe\xfa\xa1\x00\x00\x22\x89\xcf\x51\xd3\x18\x9a\x9f\x97\x3d\x61\xa0\xd8\x8e\xc1\x37\x23\xf0\xef\x97\x0d\xbb\x32\xa9\x3b\x7b\x6b\x4f\xa9\x7a\x0b\x55\x0e\x1d\x26\x2a\x2b\x1d\x69\xbf\xea\xc8\xd0\x6e\x15\x30\xe9\xcd\x6b\xe4\xc7\x6d\x0d\x15\x5b\xec\x29\x78\xc3\x9a\x49\xaa\x09\xc5\x01\xd9\x60\xcb\x86\xd3\xf6\x28\xa8\xbd\xbb\xe7\xfe\x08\x16\xd2\x39\x1e\xf1\x97\x65\x18\x96\x74\x2a\x4f\x0c\x4c\xbf\x13\xb9\x62\x88\xec\x9b\x7c\xca\x33\x9d\x25\x79\x3b\x41\x1d\xdd\xb3\xe3\x32\x17\x27\x9b\xa1\xea\xba\x56\xea\x3f\x07\xea\x03\xbb\x8e\x5d\xff\x9a\xb9\xf2\x86\xee\xe8\xbe\x10\xa7\x1a\xcf\x28\x2b\x80\xe3\x21\xbe\x24\x21\xb9\xfd\x49\x3a\xed\xa7\x77\xc9\xad\x0f\xb8\xc5\x96\xc2\x90\x80\xba\xd0\x8c\x8b\xb5\x6c\x25\x91\x1d\x43\x3b\xf1\xaf\x3b\xf2\x7b\xad\x7d\x76\xe9\x84\x73\xc3\x64\xcd\x82\x79\xce\x96\x65\x1e\x2f\x64\x71\x2c\xf6\x3c\x0a\x8b\xbe\x7c\xa2\x60\xfc\xd6\xd2\x49\xe1\xb9\x5a\xad\xbd\x4b\xd1\x1b\x43\xf1\x65\x61\x09\xa4\xcb\xf1\x48\xc1\xb0\x46\x69\x60\xad\x00\x12\xd9\x60\x30\xd1\xee\x8d\xcc\x65\xca\x67\xb0\x25\x23\xd3\xae\x74\x38\x9c\x53\x06\x98\x44\xc6\xf5\x81\x77\x37\x17\xdb\x06\x50\x2e\xc3\x12\x9c\x49\xd6\x17\xeb\x9d\xbe\xf1\x75\x37\x80\x91\x7b\x4c\xfe\x6a\x36\x4d\x8f\x8f\xab\xbd\xdb\x4f\x4f\xcb\x03\xb7\xd9\x98\xdb\xf2\x8a\xb7\x0d\xdc\xd0\x70\x70\x23\xc6\x7e\x96\x49\xc9\xc5\xca\xa0\x67\xc0\xe2\x17\xf3\x0c\xff\xca\x24\x69\x81\x02\xe8\x90\x1b\x58\x5f\x5f\xdb\x05\x6e\xc9\xfa\xb8\x2d\xa1\x2f\xac\xfe\x06\x00\x00\xff\xff\x70\x81\x54\x61\x13\x06\x00\x00")

func docsKubeMicroserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsKubeMicroserviceYaml,
		"docs/kube/microservice.yaml",
	)
}

func docsKubeMicroserviceYaml() (*asset, error) {
	bytes, err := docsKubeMicroserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/kube/microservice.yaml", size: 1555, mode: os.FileMode(420), modTime: time.Unix(1535043176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsKubeNetworkPolicyYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\x4d\x6f\x13\x31\x10\xbd\xfb\x57\x8c\x72\x44\x6c\xda\xdc\x90\x6f\x7c\x48\x88\x03\x55\x55\x24\x2e\x88\x83\xe3\x4c\x37\x43\xfd\xc5\x8c\x9d\x12\xaa\xfe\x77\xe4\x6d\x56\xd9\x6c\x36\x21\x08\x9f\xe2\x99\x97\xf7\x9e\xdf\xcc\x9a\x44\x5f\x91\x85\x62\xd0\xc0\x4b\x63\xe7\xa6\xe4\x75\x64\xfa\x6d\x32\xc5\x30\x7f\x78\x23\x73\x8a\x57\x9b\xc5\x12\xb3\x59\xa8\x07\x0a\x2b\x0d\xef\x5d\x91\x8c\x7c\x17\x1d\x2a\x8f\xd9\xac\x4c\x36\x5a\x01\x04\xe3\x51\xc3\x1a\xa9\x5d\x3b\x0a\xc8\x3a\x60\x7e\x8c\xfc\xd0\xa4\xe8\xc8\x6e\x15\x17\x87\x52\x81\x0d\x98\x44\x1f\x39\x96\x24\x1a\xbe\xcd\xd6\x2e\xf0\x9c\xe2\xec\xbb\x02\x00\x60\x94\x58\xd8\x62\xd7\xda\x31\x74\x04\x84\xb2\x83\x6c\x90\x97\x5d\xfb\x55\x57\xb8\x9c\xce\x93\xe5\x28\xc8\x1b\xb2\xc7\x64\x2d\xe6\xd9\x6b\x98\x39\x92\x3c\x45\x8b\xbf\x32\x86\x1a\x94\x4c\x31\x53\x68\x19\x45\x2e\xb4\x38\xc5\x70\xca\xd6\x24\x81\x49\xb4\xf7\xb3\x9b\xd2\x14\xa9\x2d\x92\xa3\xef\x4b\x2b\xbc\xa7\x40\x79\xf0\x86\x03\x15\xd5\x34\x8d\x52\xff\xb9\x11\xef\x28\xac\x28\xb4\xff\xb6\x18\xd1\xe1\x1d\xde\x57\x68\xff\xca\x33\xda\x0a\xe0\x78\x0f\xff\x2e\x22\x65\xf9\x03\x6d\xde\x2d\xe0\x18\xdd\x8c\xd0\x35\x9c\x8a\x91\x64\x6c\x05\xba\xc0\x8d\x6c\x25\xa3\xef\x5a\x2f\x06\xbe\xbc\x8c\xec\xad\xb5\xb1\x84\x3c\x91\xdf\xa6\x0f\x68\x84\x3c\x17\xce\xb1\x93\x13\x3e\x8e\xe5\xf6\x2b\x31\x9a\xcf\x07\x4c\x2e\x6e\x3d\x4e\x4a\x1f\xea\x35\x36\x86\xcc\xd1\x39\xe4\xd3\xd2\x92\xd0\x56\x02\xc6\xe4\xc8\x1a\xd1\xb0\x50\x00\x19\x7d\x72\x26\xa3\xee\x22\x1a\x0a\xd5\xe3\xcc\x12\x9d\xf4\xb7\x3a\xe9\x74\x5e\x1b\xa0\x97\xe9\x7e\x1f\x24\x78\x73\xc1\xf8\x00\x2a\x9d\xa9\xed\x81\x6c\x73\xc1\xab\xfb\x43\xde\xb4\xa8\xc1\x30\xb5\x26\xc7\xab\xc1\x6e\x3d\x3d\xcd\x77\xa9\x3f\x3f\x8f\xff\x70\x5b\x9c\xbb\xed\x58\x35\x7c\xba\xbf\x89\xf9\x96\x51\x6a\xf4\x7b\x9c\xe1\x76\x60\xa9\x33\x95\x1e\x07\xf7\xfd\x37\x3c\x28\xd6\xf2\xcf\x82\x92\x47\x55\x00\x9b\x8a\x86\xc5\xf5\xb5\x1f\xd5\x3d\xfa\xc8\xdb\xda\xfa\x4c\xea\x4f\x00\x00\x00\xff\xff\x25\xdb\xfa\x7b\xea\x05\x00\x00")

func docsKubeNetworkPolicyYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsKubeNetworkPolicyYaml,
		"docs/kube/network-policy.yaml",
	)
}

func docsKubeNetworkPolicyYaml() (*asset, error) {
	bytes, err := docsKubeNetworkPolicyYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/kube/network-policy.yaml", size: 1514, mode: os.FileMode(420), modTime: time.Unix(1535043176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docsKubeVersionedMicroserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\x39\x7e\x80\x9c\xf8\xf6\x81\xb7\xfe\x00\x45\x0f\x0d\x8c\x14\xe8\xa5\xe8\x81\xa2\xd6\xf2\x36\xfc\xeb\x2e\x29\xd4\x0d\xf2\xee\x05\x65\x2b\x56\x14\x39\x70\x5b\x9e\xec\xe5\xec\xcc\x70\x76\x6d\x1d\xe9\x0b\xb2\x50\xf0\x0a\xb8\xd1\x66\xa5\x73\xda\x05\xa6\x5f\x3a\x51\xf0\xab\xfb\xff\x65\x45\xe1\xba\x5f\x37\x98\xf4\xba\xba\x27\xdf\x2a\x78\x67\xb3\x24\xe4\xbb\x60\xb1\x72\x98\x74\xab\x93\x56\x15\x80\xd7\x0e\x15\xec\x90\xba\x9d\x25\x8f\xac\xfa\x03\x33\xb6\x8e\x0c\x07\x41\xee\xc9\x60\xc5\xd9\xa2\x14\x7c\x0d\x3a\xd2\x07\x0e\x39\x8a\x82\xaf\x57\x3b\xeb\x79\x45\xe1\xea\x5b\x05\x00\xc0\x28\x21\xb3\xc1\xe1\x6a\x91\x48\x8e\xc8\x1e\xb9\x19\x50\xff\x0d\x85\x19\x2b\xfe\x4c\xe8\x4b\xb3\x2c\x11\xb7\x18\x6d\xd8\x3b\xf4\xe9\x32\xb6\x18\x2c\x99\xfd\x12\x53\x0c\x6d\x4b\xc2\x39\x96\xdc\x9a\xdc\x76\x78\x21\xa5\x8e\x74\xf2\x78\x0c\x7c\x49\xc0\x64\x49\xc1\x8d\xa5\x16\xb7\xe4\x29\x4d\xde\xf5\x4c\xa5\xaa\xeb\xba\xaa\xfe\x71\xb8\x6f\xc9\xb7\xe4\xbb\xbf\x9a\x71\xb0\x78\x87\xdb\xd2\x31\x3e\xf6\x15\x0b\x15\xc0\xcb\xcd\xba\x58\x4b\x72\xf3\x1d\x4d\x3a\xae\xd4\xbc\xa9\x5e\x6e\x2a\x89\x15\xa8\x44\x6d\x0a\xde\x7a\xae\x65\x2f\x09\xdd\x70\x75\xb0\xf3\xf9\x00\x7e\x63\x4c\xc8\x3e\x2d\x84\xda\x8f\xa9\xcd\x90\xaf\x25\x76\xd6\xd0\x19\x3b\x2f\x55\x4f\xeb\x32\x9b\xdd\xfb\xa7\x6d\x5e\x70\xf0\x24\x5b\x4f\x75\x6b\x13\x7c\xe2\x60\x2d\xf2\x79\x0b\x12\xd1\x14\x22\xc6\x68\xc9\x68\x51\xb0\xae\x00\x12\xba\x68\x75\x42\x35\x24\x36\x15\x2c\xc7\xea\x06\xad\x8c\xdf\xca\x1a\xc4\xcb\x3c\x00\x8c\x72\xc3\xe7\x67\xc1\xde\x5e\x3e\x5c\x80\xc2\xaa\x0b\x6a\xe2\xa2\xfe\x83\x30\xc6\x43\x4e\x77\xa8\x40\x33\x75\x3a\x85\xeb\xc9\x3e\x3e\x3c\xac\x8e\x43\x79\x7c\x9c\x37\x6c\xb2\xb5\x9b\xe1\xdf\x42\xc1\xc7\xed\x6d\x48\x1b\x46\x29\x93\x39\xe1\x34\x77\x13\x6b\xc5\x5c\x2f\xbd\x99\x14\x4e\xbf\xff\x49\xb1\x94\x7f\x64\x94\x34\xab\x02\x98\x98\x15\xac\x6f\x6e\xdc\xac\xee\xd0\x05\xde\x97\xab\x4f\x54\xfd\x0e\x00\x00\xff\xff\x58\x0b\xb8\x08\xf1\x05\x00\x00")

func docsKubeVersionedMicroserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_docsKubeVersionedMicroserviceYaml,
		"docs/kube/versioned-microservice.yaml",
	)
}

func docsKubeVersionedMicroserviceYaml() (*asset, error) {
	bytes, err := docsKubeVersionedMicroserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/kube/versioned-microservice.yaml", size: 1521, mode: os.FileMode(420), modTime: time.Unix(1535043176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/kube/00-heighliner-namespace.yaml": docsKube00HeighlinerNamespaceYaml,
	"docs/kube/config-policy.yaml": docsKubeConfigPolicyYaml,
	"docs/kube/github-policy.yaml": docsKubeGithubPolicyYaml,
	"docs/kube/image-policy.yaml": docsKubeImagePolicyYaml,
	"docs/kube/microservice.yaml": docsKubeMicroserviceYaml,
	"docs/kube/network-policy.yaml": docsKubeNetworkPolicyYaml,
	"docs/kube/versioned-microservice.yaml": docsKubeVersionedMicroserviceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"docs": &bintree{nil, map[string]*bintree{
		"kube": &bintree{nil, map[string]*bintree{
			"00-heighliner-namespace.yaml": &bintree{docsKube00HeighlinerNamespaceYaml, map[string]*bintree{}},
			"config-policy.yaml": &bintree{docsKubeConfigPolicyYaml, map[string]*bintree{}},
			"github-policy.yaml": &bintree{docsKubeGithubPolicyYaml, map[string]*bintree{}},
			"image-policy.yaml": &bintree{docsKubeImagePolicyYaml, map[string]*bintree{}},
			"microservice.yaml": &bintree{docsKubeMicroserviceYaml, map[string]*bintree{}},
			"network-policy.yaml": &bintree{docsKubeNetworkPolicyYaml, map[string]*bintree{}},
			"versioned-microservice.yaml": &bintree{docsKubeVersionedMicroserviceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

